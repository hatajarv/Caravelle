import pandas as pd
import streamlit as st
import plotly.express as px
import numpy as np
from datetime import datetime

# --- üìå Sy√∂tetyt tiedot ---
data = {
    "P√§iv√§m√§√§r√§": ["20.11.2024", "9.12.2024", "18.11.2024", "12.10.2023", "16.10.2023", "11.4.2022", 
                    "22.3.2022", "9.3.2022", "2.3.2024", "30.3.2024", "6.11.2024", "16.11.2024", 
                    "22.11.2024", "3.1.2025", "6.1.2025", "9.1.2025", "19.3.2025"],
    "Mittarilukema": [200371, 201873, 200221, 183951, 184667, 155695, 154829, 154029, 
                       193158, 194698, 198850, 200069, 200807, 203245, 203448, 203711, 207621]
}

# Muunna p√§iv√§m√§√§r√§t oikeaan muotoon
data['P√§iv√§m√§√§r√§'] = [datetime.strptime(date, "%d.%m.%Y") for date in data['P√§iv√§m√§√§r√§']]

# Luo DataFrame ja j√§rjest√§ p√§iv√§m√§√§r√§n mukaan
df = pd.DataFrame(data)
df.sort_values('P√§iv√§m√§√§r√§', inplace=True)

# --- STREAMLIT WEB-SOVELLUS ---
st.title("üöó Auton mittarilukemat ajan my√∂t√§")

st.write("Sy√∂t√§ p√§iv√§m√§√§r√§ ja tarkista mittarilukema siihen menness√§.")

# üîπ K√§ytt√§j√§ valitsee p√§iv√§m√§√§r√§n
user_date = st.date_input("Valitse p√§iv√§m√§√§r√§")

# Muunna k√§ytt√§j√§n sy√∂tt√§m√§ p√§iv√§m√§√§r√§ oikeaan muotoon
user_date = datetime.combine(user_date, datetime.min.time())

# üîπ Suodata aiempien p√§iv√§m√§√§rien mittarilukemat
df_filtered = df[df['P√§iv√§m√§√§r√§'] <= user_date]

# üîπ N√§yt√§ viimeisin mittarilukema k√§ytt√§j√§n valitsemasta p√§iv√§m√§√§r√§st√§
if not df_filtered.empty:
    latest_km = df_filtered.iloc[-1]['Mittarilukema']
    st.success(f"üìÖ Mittarilukema {user_date.strftime('%d.%m.%Y')}: **{latest_km} km**")
else:
    st.warning("‚ö†Ô∏è Ei tietoa valitusta p√§iv√§m√§√§r√§st√§.")

# --- üìä PIIRR√Ñ KUVAJA ---
st.subheader("üìà Kilometrilukeman kehitys")
fig = px.line(df, x='P√§iv√§m√§√§r√§', y='Mittarilukema', markers=True, title="Kilometrilukemat ajan my√∂t√§")
st.plotly_chart(fig)

# --- üîÆ TULEVAISUUDEN ARVIOINTI ---
st.subheader("üîÆ Ennusta kilometrilukema tulevaisuuteen")

# Muunna p√§iv√§m√§√§r√§t numeeriseen muotoon ennustamista varten
df['P√§iv√§m√§√§r√§_ordinal'] = df['P√§iv√§m√§√§r√§'].map(datetime.toordinal)

# Lineaarinen regressio (ennusteen laskeminen)
z = np.polyfit(df['P√§iv√§m√§√§r√§_ordinal'], df['Mittarilukema'], 1)
p = np.poly1d(z)

# K√§ytt√§j√§ sy√∂tt√§√§ tulevaisuuden p√§iv√§m√§√§r√§n
future_date = st.date_input("Valitse tuleva p√§iv√§m√§√§r√§")
future_date_ordinal = datetime.combine(future_date, datetime.min.time()).toordinal()

# Lasketaan ennustettu kilometrilukema
predicted_km = p(future_date_ordinal)
st.info(f"üìÖ Arvioitu mittarilukema {future_date.strftime('%d.%m.%Y')}: **{int(predicted_km)} km**")

# --- üìä PIIRR√Ñ KUVAJA ENNUSTEELLA ---
fig2 = px.line(df, x='P√§iv√§m√§√§r√§', y='Mittarilukema', markers=True, title="Kilometrilukemat + ennuste")
fig2.add_scatter(x=[future_date], y=[predicted_km], mode='markers', marker=dict(color='red', size=10), name="Ennuste")
st.plotly_chart(fig2)

# --- üìã N√§ytet√§√§n taulukko ---
st.subheader("üìä Kaikki mittarilukemat")
st.dataframe(df[['P√§iv√§m√§√§r√§', 'Mittarilukema']])
